{"version":3,"sources":["api/assets.js","api/game.js","contexts/APIContext.jsx","components/SummonerDetail/index.js","components/SummonerDetail/SummonerDetail.jsx","App.js","serviceWorker.js","index.js"],"names":["fetchAPIVersion","a","fetch","then","res","json","versions","fetchChampion","id","version","response","data","fetchAllChampions","versionInput","fetchSummonerSpells","url","APIContext","createContext","APIContextProvider","children","useState","setVersion","champions","setChampions","summonerSpells","setSummonerSpells","cachedChampions","setCachedChampions","summonerId","setSummonerId","setPlayers","useEffect","fetchData","fetchLiveGame","participants","console","log","friendlyTeamId","find","participant","filter","teamId","addChampion","newChampions","_","clone","merge","Provider","value","SummonerDetail","useContext","summonerName","setSummonerName","isSearched","setIsSearched","summonerDetail","setSummonerDetail","searchBox","className","style","justifyContent","type","placeholder","onChange","event","target","onClick","name","isEmpty","src","profileIconId","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.26eb3293.chunk.js","sourcesContent":["async function fetchAPIVersion() {\n  const versions = await fetch('https://ddragon.leagueoflegends.com/api/versions.json')\n    .then(res => res.json());\n  return versions[0];\n}\n\nasync function fetchChampion(id) {\n  const version = await fetchAPIVersion();\n  const response = await fetch(`https://ddragon.leagueoflegends.com/cdn/${version}/data/en_US/champion/${id}.json`)\n    .then(res => res.json());\n  return response.data[id];\n}\n\nasync function fetchAllChampions(versionInput) {\n  const version = versionInput ? versionInput : await fetchAPIVersion();\n  return await fetch(`https://ddragon.leagueoflegends.com/cdn/${version}/data/en_US/champion.json`)\n    .then(res => res.json())\n    .then(json => json.data);\n}\n\nasync function fetchSummonerSpells(versionInput) {\n  const version = versionInput ? versionInput : await fetchAPIVersion();\n  return await fetch(`https://ddragon.leagueoflegends.com/cdn/${version}/data/en_US/summoner.json`)\n    .then(res => res.json())\n    .then(json => json.data);\n}\n\nexport {\n  fetchAPIVersion,\n  fetchChampion,\n  fetchAllChampions,\n  fetchSummonerSpells\n}","const url = 'https://ncblbnp19k.execute-api.us-east-1.amazonaws.com/prod';\n\nfunction fetchSummonerInfo(name) {\n  return fetch(`${url}/summoner?summonerName=${name}`)\n    .then(res => res.json());\n}\n\nfunction fetchLiveGame(summonerId) {\n  return fetch(`${url}/live?summonerId=${summonerId}`)\n    .then(res => res.json());\n}\n\nexport {\n  fetchSummonerInfo,\n  fetchLiveGame\n}","import React, { createContext, useEffect, useState } from 'react';\nimport _ from 'lodash';\n\nimport {\n  fetchAPIVersion,\n  fetchAllChampions,\n  fetchChampion,\n  fetchSummonerSpells\n} from '../api/assets';\n\nimport {\n  fetchLiveGame\n} from '../api/game';\n\nconst APIContext = createContext();\n\nfunction APIContextProvider({ children }) {\n  const [version, setVersion] = useState('');\n  const [champions, setChampions] = useState({});\n  const [summonerSpells, setSummonerSpells] = useState({});\n  const [cachedChampions, setCachedChampions] = useState([]);\n  const [gameData, setGameData] = useState({});\n  const [summonerId, setSummonerId] = useState('');\n  const [players, setPlayers] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      fetchAPIVersion().then((res) => {\n        setVersion(res);\n        fetchAllChampions(res).then(data => setChampions(data));\n        fetchSummonerSpells(res).then(data => setSummonerSpells(data));\n      });\n    }\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    fetchLiveGame(summonerId).then(res => {\n      const { participants } = res;\n      console.log('Participants', participants);\n      const friendlyTeamId = participants.find(participant => participant.summonerId === summonerId);\n      console.log('Friendly Team Id', friendlyTeamId);\n      return participants.filter(participant => participant.teamId !== friendlyTeamId);\n    });\n  }, [summonerId]);\n\n  const addChampion = async (id) => {\n    return fetchChampion(id).then(res => {\n      const newChampions = _.clone(champions);\n      newChampions[id] = _.merge(champions[id], res);\n      setChampions(newChampions);\n      setCachedChampions([...cachedChampions, id]);\n      return res;\n    }).then(participants => setPlayers(participants));\n  }\n\n  return (\n    <APIContext.Provider value={{\n      version, champions, summonerSpells, addChampion, cachedChampions, setSummonerId\n    }}>\n      {children}\n    </APIContext.Provider>\n  );\n}\n\nexport {\n  APIContext,\n  APIContextProvider\n}","import SummonerDetail from './SummonerDetail';\n\nexport default SummonerDetail;","import React, { useState, useContext } from 'react';\nimport _ from 'lodash';\n\nimport { APIContext } from '../../contexts/APIContext';\nimport { fetchSummonerInfo } from '../../api/game';\n\nexport default function SummonerDetail() {\n  const { setSummonerId } = useContext(APIContext);\n  const [summonerName, setSummonerName] = useState('');\n  const [isSearched, setIsSearched] = useState(false);\n  const [summonerDetail, setSummonerDetail] = useState({\n    \"id\": \"UBRQzAs_7fNzUgPz_C_AoNMDSDoxU-u-5Sn_2D9NEg5APLE\",\n    \"accountId\": \"xyekwfUUSchyZ__64OfLTHitYrycLAsWw9dcVPAo4tJw6vM\",\n    \"puuid\": \"ZmNFipaaSge4O0MdZgeFmcl5NQxil_UWE0kTTMP4sghOKYKgJjy3SN0q_TMO41UaBdeZHRz_D1YuYA\",\n    \"name\": \"lllducklll\",\n    \"profileIconId\": 4368,\n    \"revisionDate\": 1592635303000,\n    \"summonerLevel\": 147\n  });\n\n  const changeSummonerName = (event) => {\n    setSummonerName(event.target.value);\n  }\n\n  const searchSummoner = () => {\n    setIsSearched(true);\n    if (!_.isEmpty(summonerName)) {\n      fetchSummonerInfo(summonerName).then(res => {\n        const { id } = res;\n        setSummonerDetail(res);\n        setSummonerId(id);\n      });\n    }\n  }\n\n  const searchBox = (\n    <div className=\"field has-addons u-justify-content-center\" style={isSearched ? {} : { justifyContent: 'center' }}>\n      <div className=\"control\">\n        <input className=\"input\" type=\"text\" placeholder=\"Summoner Name\" value={summonerName} onChange={changeSummonerName} />\n      </div>\n      <div className=\"control\">\n        <button className=\"button is-info\" onClick={searchSummoner}>\n          Search\n      </button>\n      </div>\n    </div>\n  );\n\n  if (!isSearched) {\n    return (\n      <div className=\"box champion-box\">\n        { searchBox }\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"box champion-box\">\n      <div className=\"level\">\n        <div className=\"level-left\">\n          <figure className=\"image is-96x96\">\n            <img\n              className=\"is-rounded\"\n              src={`https://ddragon.leagueoflegends.com/cdn/10.12.1/img/profileicon/${summonerDetail.profileIconId}.png`}\n              alt=\"Summoner Profile\"\n            />\n          </figure>\n          <h1 className=\"title ml-4\">{summonerDetail.name}</h1>\n        </div>\n        <div className=\"level-right\">\n          { searchBox }\n        </div>\n      </div>\n    </div>\n  );\n}","import React from 'react';\n\n// import Champion from './components/Champion';\nimport SummonerDetail from './components/SummonerDetail';\nimport { APIContextProvider } from './contexts/APIContext';\n\nfunction App() {\n  return (\n    <APIContextProvider>\n      <main>\n        <div className=\"columns is-vcentered\">\n          <div className=\"column\">\n            <SummonerDetail />\n          </div>\n        </div>\n      </main>\n    </APIContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './sass/styles.scss';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}