{"version":3,"sources":["logo.svg","utils/constFetcher.js","components/TimerChip/UltimateTimer.jsx","components/TimerChip/SummonerSelect.jsx","components/TimerChip/SummonerTimer.jsx","components/ChampionSelect/index.js","components/ChampionSelect/ChampionSelect.jsx","components/Champion/index.js","components/Champion/Champion.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","fetchAPIVersion","a","fetch","then","res","json","versions","id","version","response","data","UltimateTimer","duration","useState","isActivated","setActivated","timer","setTimer","useEffect","interval","setInterval","clearInterval","icon","avatar","Avatar","Chip","onDelete","label","deleteIcon","SummonerSelect","spellData","isOpen","onClose","setSpell","handleClick","useCallback","event","target","title","spellImages","spellId","spell","imageUrl","image","full","modes","includes","push","CardMedia","className","key","onClick","Dialog","open","SummonerTimer","imgUrl","isDialogOpen","setIsDialogOpen","setVersion","spellCooldown","_","get","resetTimer","src","alt","ChampionSelect","onChange","champions","setChampions","fetchAllChampions","values","championList","map","champion","MenuItem","value","name","Select","Champion","setId","setData","setSpellData","spellOne","setSpellOne","spellTwo","setSpellTwo","championUrl","spellOneUrl","spellTwoUrl","fetchSummonerSpells","fetchChampion","ultTimer","spells","Card","CardContent","App","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f56000e6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","async function fetchAPIVersion() {\n  const versions = await fetch('https://ddragon.leagueoflegends.com/api/versions.json')\n    .then(res => res.json());\n  return versions[0];\n}\n\nasync function fetchChampion(id) {\n  const version = await fetchAPIVersion();\n  const response = await fetch(`http://ddragon.leagueoflegends.com/cdn/${version}/data/en_US/champion/${id}.json`)\n    .then(res => res.json());\n  return response.data[id];\n}\n\nasync function fetchAllChampions() {\n  const version = await fetchAPIVersion();\n  return await fetch(`http://ddragon.leagueoflegends.com/cdn/${version}/data/en_US/champion.json`)\n    .then(res => res.json())\n    .then(json => json.data);\n}\n\nasync function fetchSummonerSpells() {\n  const version = await fetchAPIVersion();\n  return await fetch(`http://ddragon.leagueoflegends.com/cdn/${version}/data/en_US/summoner.json`)\n    .then(res => res.json())\n    .then(json => json.data);\n}\n\nexport {\n  fetchAPIVersion,\n  fetchChampion,\n  fetchAllChampions,\n  fetchSummonerSpells\n}","import React, { useState, useEffect } from 'react';\nimport Chip from '@material-ui/core/Chip';\nimport Avatar from '@material-ui/core/Avatar';\n\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport CheckIcon from '@material-ui/icons/CheckCircle';\n\nexport default function UltimateTimer({ duration }) {\n  const [isActivated, setActivated] = useState(false);\n  const [timer, setTimer] = useState(duration);\n\n  // Reset timer if the duration prop changes\n  useEffect(() => {\n    setTimer(duration);\n    setActivated(false);\n  }, [duration])\n\n  useEffect(() => {\n    if (isActivated && timer > 0) {\n      const interval = setInterval(() => setTimer(timer - 1), 1000);\n      return () => {\n        clearInterval(interval);\n      }\n    } else if (timer === 0) {\n      setActivated(false);\n      setTimer(duration);\n    }\n  }, [isActivated, timer, duration]);\n\n  const handleClick = () => {\n    if (isActivated) {\n      setTimer(duration);\n    }\n    setActivated(!isActivated);\n  }\n\n  const icon = isActivated ? <CancelIcon /> : <CheckIcon />\n  const avatar = <Avatar>U</Avatar>\n\n  return (\n    <Chip avatar={avatar} onDelete={handleClick} label={timer} deleteIcon={icon} />\n  );\n}","import React, { useEffect, useCallback } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport CardMedia from '@material-ui/core/CardMedia';\n\nimport './chip.css';\n\nconst gameMode = \"CLASSIC\";\n\nexport default function SummonerSelect({ spellData, version, isOpen, onClose, setSpell }) {\n  const handleClick = useCallback((event) => {\n    setSpell(event.target.title);\n    onClose();\n  }, [onClose, setSpell]);\n  \n  const spellImages = [];\n  useEffect(() => {\n    for (let spellId in spellData) {\n      const spell = spellData[spellId];\n      const imageUrl = `http://ddragon.leagueoflegends.com/cdn/${version}/img/spell/${spell.image.full}`;\n      if (spell.modes.includes(gameMode)) {\n        spellImages.push(<CardMedia className=\"summoner-icon\" image={imageUrl} key={spellId} title={spellId} onClick={handleClick} />);\n      }\n    }\n  }, [handleClick, spellData, spellImages, version]);\n\n  return (\n    <Dialog open={isOpen} onClose={onClose}>\n      { spellImages }\n    </Dialog>\n  );\n}","import React, { useState, useEffect, useCallback } from 'react';\nimport _ from 'lodash';\nimport Chip from '@material-ui/core/Chip';\nimport Avatar from '@material-ui/core/Avatar';\n\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport CheckIcon from '@material-ui/icons/CheckCircle';\nimport SummonerSelect from './SummonerSelect';\n\nimport { fetchAPIVersion } from '../../utils/constFetcher';\n\nexport default function SummonerTimer({ spell: spellId, setSpell, imgUrl, spellData }) {\n  const [isActivated, setActivated] = useState(false);\n  const [timer, setTimer] = useState(-1);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [version, setVersion] = useState(\"\");\n\n  const spell = spellData[spellId];\n  const spellCooldown = _.get(spell, 'cooldown[0]', -1);\n\n  useEffect(() => {\n    fetchAPIVersion().then(res => setVersion(res));\n  }, []);\n\n  const resetTimer = useCallback(() => {\n    setTimer(spellCooldown);\n    setActivated(false);\n  }, [spellCooldown]);\n\n  // Reset timer if the duration prop changes\n  useEffect(() => {\n    resetTimer();\n  }, [resetTimer]);\n\n  useEffect(() => {\n    if (isActivated && timer > 0) {\n      const interval = setInterval(() => setTimer(timer - 1), 1000);\n      return () => {\n        clearInterval(interval);\n      }\n    } else if (timer === 0) {\n      resetTimer();\n    }\n  }, [isActivated, timer, resetTimer]);\n\n  const handleClick = () => {\n    if (isActivated) {\n      setTimer(spellCooldown);\n    }\n    setActivated(!isActivated);\n  }\n\n  const openDialog = () => {\n    if (!isActivated) {\n      setIsDialogOpen(true);\n    }\n  }\n\n  const closeDialog = () => {\n    setIsDialogOpen(false);\n  }\n\n  const icon = isActivated ? <CancelIcon /> : <CheckIcon />\n  const avatar = <Avatar src={imgUrl} alt={spell} />\n\n  return (\n    <>\n      <Chip\n        avatar={avatar}\n        onClick={openDialog}\n        onDelete={handleClick}\n        label={timer}\n        deleteIcon={icon}\n      />\n      <SummonerSelect\n        isOpen={isDialogOpen}\n        onClose={closeDialog}\n        spellData={spellData}\n        version={version}\n        setSpell={setSpell}\n      />\n    </>\n  );\n}","import ChampionSelect from './ChampionSelect';\n\nexport default ChampionSelect;","import React, { useState, useEffect } from 'react';\nimport _ from 'lodash';\n\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport { fetchAllChampions } from '../../utils/constFetcher';\n\nexport default function ChampionSelect({ id, onChange }) {\n  const [champions, setChampions] = useState([]);\n\n  useEffect(() => {\n    fetchAllChampions().then((res) => setChampions(_.values(res)));\n  }, []);\n\n  const championList = champions.map((champion) => <MenuItem key={champion.id} value={champion.id}>{champion.name}</MenuItem>);\n\n  return (\n    <Select value={id} onChange={onChange}>\n      { championList }\n    </Select>\n  );\n}","import Champion from './Champion';\n\nexport default Champion;","import React, { useState, useEffect } from 'react';\nimport _ from 'lodash';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\n\nimport { fetchAPIVersion, fetchChampion, fetchSummonerSpells } from '../../utils/constFetcher';\nimport { UltimateTimer, SummonerTimer } from '../../components/TimerChip';\nimport ChampionSelect from '../../components/ChampionSelect';\n\nimport './champion.css';\n\nexport default function Champion() {\n  const [version, setVersion] = useState(\"\");\n  const [id, setId] = useState(\"Taliyah\");\n  const [data, setData] = useState({});\n  const [spellData, setSpellData] = useState({});\n  const [spellOne, setSpellOne] = useState(\"SummonerDot\");\n  const [spellTwo, setSpellTwo] = useState(\"SummonerFlash\");\n\n  const championUrl = `http://ddragon.leagueoflegends.com/cdn/${version}/img/champion/${id}.png`;\n  const spellOneUrl = `http://ddragon.leagueoflegends.com/cdn/${version}/img/spell/${spellOne}.png`;\n  const spellTwoUrl = `http://ddragon.leagueoflegends.com/cdn/${version}/img/spell/${spellTwo}.png`;\n\n  useEffect(() => {\n    fetchAPIVersion().then(res => setVersion(res));\n    fetchSummonerSpells().then(res => setSpellData(res));\n  }, []);\n\n  useEffect(() => {\n    fetchChampion(id).then(res => setData(res));\n  }, [id])\n\n  const onChampionChange = (event) => {\n    setId(event.target.value);\n  }\n\n  const ultTimer = _.get(data.spells, '3.cooldown[0]', 0);\n\n  if (!version) {\n    return null;\n  }\n\n  return (\n    <Card className=\"card\">\n      <CardMedia className=\"card-media\" image={championUrl} title={id} />\n      <div className=\"card-details\">\n        <CardContent>\n          <ChampionSelect id={id} onChange={onChampionChange} />\n        </CardContent>\n        <div className=\"card-timers\">\n          <UltimateTimer duration={ultTimer} />\n          <SummonerTimer spell={spellOne} setSpell={setSpellOne} spellData={spellData} imgUrl={spellOneUrl} />\n          <SummonerTimer spell={spellTwo} setSpell={setSpellTwo} spellData={spellData} imgUrl={spellTwoUrl} />\n        </div>\n      </div>\n    </Card>\n  );\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Champion from './components/Champion';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"column\">\n        <Champion id=\"Jax\" />\n        <Champion id=\"LeeSin\" />\n        <Champion id=\"Taliyah\" />\n        <Champion id=\"Caitlyn\" />\n        <Champion id=\"Thresh\" />\n      </div>\n      <div className=\"column\">\n        <Champion id=\"Malphite\" />\n        <Champion id=\"Kayn\" />\n        <Champion id=\"Orianna\" />\n        <Champion id=\"Ezreal\" />\n        <Champion id=\"Leona\" />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}