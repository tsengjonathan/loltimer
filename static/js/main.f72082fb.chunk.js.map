{"version":3,"sources":["api/assets.js","api/game.js","contexts/APIContext.jsx","components/SpellTimer/index.js","components/SpellTimer/SpellTimer.jsx","components/Champion/index.js","components/Champion/Champion.jsx","components/SummonerDetail/index.js","components/SummonerDetail/SummonerDetail.jsx","App.js","serviceWorker.js","index.js"],"names":["fetchAPIVersion","a","fetch","then","res","json","versions","fetchAllChampions","versionInput","version","data","fetchSummonerSpells","url","APIContext","createContext","APIContextProvider","children","useState","setVersion","champions","setChampions","spells","setSpells","summonerId","setSummonerId","players","setPlayers","useEffect","map","Object","values","champion","key","spell","fetchData","_","isEmpty","fetchLiveGame","participants","friendlyTeamId","find","participant","teamId","filter","Provider","value","SpellTimer","id","useContext","isActivated","setActivated","timer","setTimer","cooldown","get","urlPrefix","resetTimer","useCallback","interval","setInterval","clearInterval","className","src","image","full","alt","max","class","onClick","Champion","index","summonerInfo","championId","spell1Id","spell2Id","name","summonerName","SummonerDetail","setSummonerName","isSearched","setIsSearched","summonerDetail","setSummonerDetail","searchBox","style","justifyContent","type","placeholder","onChange","event","target","profileIconId","summonerLevel","App","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f72082fb.chunk.js","sourcesContent":["async function fetchAPIVersion() {\n  const versions = await fetch('https://ddragon.leagueoflegends.com/api/versions.json')\n    .then(res => res.json());\n  return versions[0];\n}\n\nasync function fetchChampion(id) {\n  const version = await fetchAPIVersion();\n  const response = await fetch(`https://ddragon.leagueoflegends.com/cdn/${version}/data/en_US/champion/${id}.json`)\n    .then(res => res.json());\n  return response.data[id];\n}\n\nasync function fetchAllChampions(versionInput) {\n  const version = versionInput ? versionInput : await fetchAPIVersion();\n  return await fetch(`https://ddragon.leagueoflegends.com/cdn/${version}/data/en_US/champion.json`)\n    .then(res => res.json())\n    .then(json => json.data);\n}\n\nasync function fetchSummonerSpells(versionInput) {\n  const version = versionInput ? versionInput : await fetchAPIVersion();\n  return await fetch(`https://ddragon.leagueoflegends.com/cdn/${version}/data/en_US/summoner.json`)\n    .then(res => res.json())\n    .then(json => json.data);\n}\n\nexport {\n  fetchAPIVersion,\n  fetchChampion,\n  fetchAllChampions,\n  fetchSummonerSpells\n}","const url = 'https://ncblbnp19k.execute-api.us-east-1.amazonaws.com/prod';\n\nfunction fetchSummonerInfo(name) {\n  return fetch(`${url}/summoner?summonerName=${name}`)\n    .then(res => res.json());\n}\n\nfunction fetchLiveGame(summonerId) {\n  return fetch(`${url}/live?summonerId=${summonerId}`)\n    .then(res => res.json());\n}\n\nexport {\n  fetchSummonerInfo,\n  fetchLiveGame\n}","import React, { createContext, useEffect, useState } from 'react';\nimport _ from 'lodash';\n\nimport {\n  fetchAPIVersion,\n  fetchAllChampions,\n  fetchSummonerSpells\n} from '../api/assets';\n\nimport {\n  fetchLiveGame\n} from '../api/game';\n\nconst APIContext = createContext();\n\nfunction APIContextProvider({ children }) {\n  const [version, setVersion] = useState('');\n  const [champions, setChampions] = useState({});\n  const [spells, setSpells] = useState({});\n  const [summonerId, setSummonerId] = useState('');\n  const [players, setPlayers] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      fetchAPIVersion().then((res) => {\n        setVersion(res);\n        fetchAllChampions(res).then(data => {\n          const map = {};\n          for (let champion of Object.values(data)) {\n            const { key } = champion;\n            map[key] = champion;\n          };\n          setChampions(map);\n        });\n        fetchSummonerSpells(res).then(data => {\n          const map = {};\n          for (let spell of Object.values(data)) {\n            const { key } = spell;\n            map[key] = spell;\n          }\n          setSpells(map);\n        });\n      });\n    }\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (!_.isEmpty(summonerId)) {\n      fetchLiveGame(summonerId).then(res => {\n        const { participants } = res;\n        const friendlyTeamId = participants.find(participant => participant.summonerId === summonerId).teamId;\n        return participants.filter(participant => participant.teamId !== friendlyTeamId);\n      }).then(participants => setPlayers(participants));\n    }\n  }, [summonerId]);\n\n  return (\n    <APIContext.Provider value={{\n      version, champions, spells, setSummonerId, players\n    }}>\n      {children}\n    </APIContext.Provider>\n  );\n}\n\nexport {\n  APIContext,\n  APIContextProvider\n}","import SpellTimer from './SpellTimer';\n\nexport default SpellTimer;","import React, { useContext, useEffect, useState, useCallback } from 'react';\nimport _ from 'lodash';\n\nimport { APIContext } from '../../contexts/APIContext';\n\nexport default function SpellTimer({ id }) {\n  const { version, spells } = useContext(APIContext);\n  const [isActivated, setActivated] = useState(false);\n  const [timer, setTimer] = useState(-1);\n\n  const spell = spells[id];\n  const cooldown = _.get(spell, ['cooldown', 0]);\n\n  const urlPrefix = `https://ddragon.leagueoflegends.com/cdn/${version}/img`;\n  \n  const resetTimer = useCallback(() => {\n    setTimer(cooldown);\n    setActivated(false);\n  }, [cooldown]);\n\n  useEffect(() => {\n    setTimer(cooldown);\n  }, [cooldown])\n  \n  useEffect(() => {\n    if (isActivated && timer > 0) {\n      const interval = setInterval(() => setTimer(timer - 1), 1000);\n      return () => {\n        clearInterval(interval);\n      }\n    } else if (timer === 0) {\n      resetTimer();\n    }\n  }, [isActivated, timer, resetTimer]);\n\n  const handleClick = () => {\n    if (isActivated) {\n      setTimer(cooldown);\n    }\n    setActivated(!isActivated);\n  }\n  \n  if (!spell) {\n    return <progress className=\"progress\" />\n  }\n\n  return (\n    <div className=\"level\">\n      <figure className=\"image is-24x24 mr-2\">\n        <img\n          className=\"is-rounded\"\n          src={`${urlPrefix}/spell/${spell.image.full}`}\n          alt=\"Champion Icon\"\n        />\n      </figure>\n      <div className=\"level-item\">\n        <progress className=\"progress\" max={cooldown} value={timer} />\n      </div>\n      <span class=\"tag ml-2\">\n        {timer}\n      </span>\n      <button className=\"button is-small ml-2\" onClick={handleClick}>\n        {isActivated ? \"Stop\" : \"Start\"}\n      </button>\n    </div>\n  )\n}","import Champion from './Champion';\n\nexport default Champion;","import React, { useContext } from 'react';\nimport _ from 'lodash';\n\nimport { APIContext } from '../../contexts/APIContext';\n\nimport SpellTimer from '../SpellTimer';\n\n\nexport default function Champion({ index }) {\n  const { players, champions, version } = useContext(APIContext);\n  \n  const urlPrefix = `https://ddragon.leagueoflegends.com/cdn/${version}/img`;\n\n  if (_.isEmpty(players) || _.isEmpty(champions) || _.isEmpty(version)) {\n    return null;\n  }\n  \n  const summonerInfo = players[index];\n  const champion = champions[summonerInfo.championId];\n  const { spell1Id, spell2Id } = summonerInfo;\n\n  return (\n    <div className=\"box champion-box\">\n      <div className=\"level\">\n        <div className=\"level-left\">\n          <figure className=\"image is-96x96\">\n            <img\n              src={`${urlPrefix}/champion/${champion.id}.png`}\n              alt=\"Champion Icon\"\n            />\n          </figure>\n          <div className=\"title ml-4\">\n            <h1 className=\"title\">{champion.name}</h1>\n            <h2 className=\"subtitle is-6\">{summonerInfo.summonerName}</h2>\n          </div>\n        </div>\n      </div>\n      <SpellTimer id={spell1Id} />\n      <SpellTimer id={spell2Id} />\n    </div>\n  )\n}","import SummonerDetail from './SummonerDetail';\n\nexport default SummonerDetail;","import React, { useState, useContext } from 'react';\nimport _ from 'lodash';\n\nimport { APIContext } from '../../contexts/APIContext';\nimport { fetchSummonerInfo } from '../../api/game';\n\nexport default function SummonerDetail() {\n  const { setSummonerId } = useContext(APIContext);\n  const [summonerName, setSummonerName] = useState('');\n  const [isSearched, setIsSearched] = useState(false);\n  const [summonerDetail, setSummonerDetail] = useState({});\n\n  const changeSummonerName = (event) => {\n    setSummonerName(event.target.value);\n  }\n\n  const searchSummoner = () => {\n    if (!_.isEmpty(summonerName)) {\n      fetchSummonerInfo(summonerName).then(res => {\n        const { id } = res;\n        setSummonerDetail(res);\n        setSummonerId(id);\n        setIsSearched(true);\n      });\n    }\n  }\n\n  const searchBox = (\n    <div className=\"field has-addons u-justify-content-center\" style={isSearched ? {} : { justifyContent: 'center' }}>\n      <div className=\"control\">\n        <input className=\"input is-small\" type=\"text\" placeholder=\"Summoner Name\" value={summonerName} onChange={changeSummonerName} />\n      </div>\n      <div className=\"control\">\n        <button className=\"button is-small\" onClick={searchSummoner}>\n          Search\n      </button>\n      </div>\n    </div>\n  );\n\n  if (!isSearched) {\n    return (\n      <div className=\"box champion-box\">\n        { searchBox }\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"box champion-box\">\n      <div className=\"level\">\n        <div className=\"level-left\">\n          <figure className=\"image is-96x96\">\n            <img\n              className=\"is-rounded\"\n              src={`https://ddragon.leagueoflegends.com/cdn/10.12.1/img/profileicon/${summonerDetail.profileIconId}.png`}\n              alt=\"Summoner Profile\"\n            />\n          </figure>\n          <div className=\"level-item\">\n            <h1 className=\"title ml-4\">{summonerDetail.name}</h1>\n            <span className=\"tag ml-2\">{summonerDetail.summonerLevel}</span>\n          </div>\n        </div>\n        <div className=\"level-right\">\n          { searchBox }\n        </div>\n      </div>\n    </div>\n  );\n}","import React from 'react';\n\nimport Champion from './components/Champion';\nimport SummonerDetail from './components/SummonerDetail';\nimport { APIContextProvider } from './contexts/APIContext';\n\nfunction App() {\n  return (\n    <APIContextProvider>\n      <main>\n        <div className=\"columns is-vcentered\">\n          <div className=\"column\">\n            <SummonerDetail />\n            <Champion index={0} />\n            <Champion index={1} />\n          </div>\n          <div className=\"column\">\n            <Champion index={2} />\n            <Champion index={3} />\n            <Champion index={4} />\n          </div>\n          </div>\n        </main>\n    </APIContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './sass/styles.scss';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}